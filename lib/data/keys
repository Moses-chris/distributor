
Arabic 64-bit	237FCBAA234166A836260DFA760F71F1211A6C573130C75D4CCDCA9D7D29F69A
Arabic 32-bit	964F2D179FA13670285B8A2DB7F0CD72983E8BC5DF8554F547550486AD8AFEAB
Bulgarian 64-bit	1DFC04F3EC68602B547961A5AFD3758164E0C36A6BF420C564B1B44B375E6070
Bulgarian 32-bit	93C43C0F17AB17671EE16F321C0FA5E1506AAADAD0BD84A4207AD8692B78554E
Chinese Simplified 64-bit	D485D370406CBCB68959718817BD12ED87E537A14C885F84962E07136FC4A049
Chinese Simplified 32-bit	C828ACCB08886622F5E1A127BB83070BAE0E9235EF0E31573ABC6A8A5CB55286
Chinese Traditional 64-bit	C9594113B52F96783FB6CA8248EBBC972277E26FB215C302BFCCE50DF6C21A79
Chinese Traditional 32-bit	62E61916A5BC6F6B7EB75D132583C4131AB81E4A19038DE527918324585720EE
Croatian 64-bit	140462535A28CD006CD97055DABB086F8511F52BEFEECDF8BCB5ADEB64CED3AB
Croatian 32-bit	5451422072BF6A231F2CA8CA865B89077EB2E5084DDFAFAD6B1F7949732B25B8
Czech 64-bit	AD5EAAD75971D22C84F433854FE9671EFC360E9EB501F3B2E94A72E74C78F6FE
Czech 32-bit	AF1A11BEA0BA0EC789C546EE0BA0740489065CBBC0B329CC4B00B9214C23E42B
Danish 64-bit	74CF090D3F881F1EFCD597E01DC3FA4C6BFC2F5D3CD141CF68C92034E0BA6A57
Danish 32-bit	A2F4C905A75B87372BEC9DA81EDC521EBA16FA0832C269FE7F71B5DA34FE6EFF
Dutch 64-bit	51B2F525CF7426FEFD1EF0813C4C07E7D772C61C712E20C879D8ED568D2ABCC9
Dutch 32-bit	AC09A473E97864F6DD4E0AF4038BECF7A43FEF790F9AF9802CEF5530DFB69BCE
English 64-bit	A6F470CA6D331EB353B815C043E327A347F594F37FF525F17764738FE812852E
English 32-bit	AC0B7045B6C3A72A4D46DAAB0944E109A55D9EDE3A11B775FDB57C2DD3FCA2EF
English International 64-bit	EDC53C5C5FE6926DEA23FC3E884FBCF78CC2B9E76364BE968F806FC6D42B59D2
English International 32-bit	38D093AE08BF80302B900BC91A2CE5205C5086DDEEFAB29E8D529D5607B6B4DB
Estonian 64-bit	AF649CE2920C4AFF96EF954C1B598C6DEE3E705EDC074565DDDCE3294D29F859
Estonian 32-bit	6B59D1F6C02C5215384E5BD1D16B2591710D9F6C430F8C4C1F554973672458F1
Finnish 64-bit	C17F3CFA9EC971DCD64B4A1152A7B563ADE165FB9DEB941F7C791E0F722D2D2F
Finnish 32-bit	64F6427BB981BBADC0731AA686D62F157174A638EE9F2E10DF582753085B4E12
French 64-bit	7B7F99E804B50F5E738FFDFC571803CCDCFE139599392496048FD32C5EAEDFF9
French 32-bit	F3E3C0EF680B4C0E03A4E7601A4B00F1EA13B8EED501F16B3E0610014E788AB9
French Canadian 64-bit	B8C09E172DBDE8E3DB14E110857AE8724D9BDB73F5B4D37D75929FF394B5CC6B
French Canadian 32-bit	E6E6A19346298D95FBC3D472AF5784755C6F510233B56FE330AD4C7AC3D2F957
German 64-bit	D1A41A09E9AE09631A087EDF95D7F4EECAB622F88B3C824D856CFEA47FCC0B4C
German 32-bit	B0BFC1B9B176DF0303ED3A91E7332CD1A8B57B07F25752CEC9493E1333F88075
Greek 64-bit	EE069CD752B140EFC9AF0A413313C637E13CCCB69225ED9FEDCCEB634B905EC7



class Order {
  final int? id;
  final String bakerName;
  final String status;
  final DateTime deliveryDate;
  final double totalAmount;
  final bool isSynced;

  Order({
    this.id,
    required this.bakerName,
    required this.status,
    required this.deliveryDate,
    required this.totalAmount,
    this.isSynced = false,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'bakerName': bakerName,
      'status': status,
      'deliveryDate': deliveryDate.toIso8601String(),
      'totalAmount': totalAmount,
      'isSynced': isSynced ? 1 : 0,
    };
  }

  factory Order.fromMap(Map<String, dynamic> map) {
    return Order(
      id: map['id'] is String ? int.tryParse(map['id']) : map['id'],
      bakerName: map['bakerName'],
      status: map['status'],
      deliveryDate: DateTime.parse(map['deliveryDate']),
      totalAmount: (map['totalAmount'] is int) ? map['totalAmount'].toDouble() : map['totalAmount'],
      isSynced: map['isSynced'] == 1 || map['isSynced'] == true,
    );
  }
}
